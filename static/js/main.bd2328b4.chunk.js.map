{"version":3,"sources":["WUML 2.png","bee.png","components/KNavbar.js","components/KNavLink.js","components/KNavRoute.js","BrainPowder.js","pages.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","KNavbar","props","Navbar","className","bg","expand","to","Brand","brand","Toggle","aria-controls","Collapse","id","Nav","children","button","KNavLink","exact","strict","activeClassName","page","url","name","KNavRoute","path","component","BrainPowder","pages","src","Pic","alt","Home","Jumbotron","Button","variant","href","Container","Row","Col","Card","style","width","Img","Body","Title","Text","React","Component","player","title","allow","scrolling","border","overflow","maxWidth","margin","height","KNavButton","KLinks","map","item","key","KRoutes","App","NavDropdown","Item","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,iC,2KCkB5BC,EAbC,SAACC,GAAD,OAChB,kBAACC,EAAA,EAAD,CAAQC,UAAU,mBAAmBC,GAAG,UAAUC,OAAO,MACvD,kBAAC,IAAD,CAAMC,GAAG,KAAI,kBAACJ,EAAA,EAAOK,MAAR,KAAeN,EAAMO,QAClC,kBAACN,EAAA,EAAOO,OAAR,CAAeC,gBAAc,qBAC7B,kBAACR,EAAA,EAAOS,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKV,UAAU,WACZF,EAAMa,UAERb,EAAMc,UCEIC,EAXE,SAACf,GAAD,OACb,kBAAC,IAAD,CAASgB,OAAK,EAACC,QAAM,EACjBf,UAAU,gCACVgB,gBAAgB,SAChBb,GAAIL,EAAMmB,KAAKC,KAEdpB,EAAMmB,KAAKE,O,QCHLC,EAJG,SAACtB,GAAD,OAClB,kBAAC,IAAD,CAAOuB,KAAMvB,EAAMmB,KAAKC,IAAKI,UAAWxB,EAAMmB,KAAKK,a,iBCQpCC,ICJAC,EAND,CACV,CAACL,KAAK,eAAgBD,IAAI,eAAgBI,UDE9C,WACE,OAAQ,6BACN,yBAAKG,IAAKC,IAAKC,IAAI,QCHnB,CAACR,KAAK,QAASD,IAAI,SAAUI,UAAW,MACxC,CAACH,KAAK,aAAcD,IAAI,cAAeI,UAAW,O,yGC6DvCM,E,uKAvDP,OAAO,6BACK,kBAACC,EAAA,EAAD,KACI,8DACA,6JAIA,2BACA,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,KAAK,mBAA/B,wBAGJ,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMpC,UAAU,UAAUqC,MAAO,CAAEC,MAAO,UACtC,kBAACF,EAAA,EAAKG,IAAN,CAAUR,QAAQ,MAAMN,IAAI,2CAC5B,kBAACW,EAAA,EAAKI,KAAN,KACI,kBAACJ,EAAA,EAAKK,MAAN,4BACA,kBAACL,EAAA,EAAKM,KAAN,qHAOZ,kBAACP,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMpC,UAAU,UAAUqC,MAAO,CAAEC,MAAO,UACtC,kBAACF,EAAA,EAAKG,IAAN,CAAUR,QAAQ,MAAMN,IAAI,2CAC5B,kBAACW,EAAA,EAAKI,KAAN,KACI,kBAACJ,EAAA,EAAKK,MAAN,6BACA,kBAACL,EAAA,EAAKM,KAAN,6HAQZ,kBAACP,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMpC,UAAU,UAAUqC,MAAO,CAAEC,MAAO,UACtC,kBAACF,EAAA,EAAKG,IAAN,CAAUR,QAAQ,MAAMN,IAAI,2CAC5B,kBAACW,EAAA,EAAKI,KAAN,KACI,kBAACJ,EAAA,EAAKK,MAAN,4BACA,kBAACL,EAAA,EAAKM,KAAN,oG,GA9CrBC,IAAMC,WCQnBC,EAAS,4BAAQC,MAAM,SAASrB,IAAI,6CAA6Ca,MAAM,OAAOS,MAAM,WAAWC,UAAU,KAAKX,MAAO,CAACY,OAAQ,OAAQC,SAAU,SAAUC,SAAU,QAASC,OAAQ,WAAYC,OAAQ,WAEzNC,EAAa,yBAAK7C,GAAG,aACzB,kBAACqB,EAAA,EAAD,CAAQC,QAAQ,YAAYC,KAAK,+BAAjC,QACO,yBAAKP,IAAKC,IAAKY,MAAM,KAAKX,IAAI,OAIjC4B,EAAS/B,EAAMgC,KAAI,SAACC,GAAD,OAAW,kBAAC,EAAD,CAAUxC,KAAMwC,EAAMC,IAAKD,EAAKtC,UAC9DwC,EAAUnC,EAAMgC,KAAI,SAACC,GAAD,OAAW,kBAAC,EAAD,CAAWxC,KAAMwC,EAAMC,IAAKD,EAAKtC,UAqBvDyC,MAnBf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,CAASvD,MAAO,MAAOO,OAAQ0C,GAC5BC,EACD,kBAACM,EAAA,EAAD,CAAaf,MAAM,SAASrC,GAAG,sBAC7B,kBAACoD,EAAA,EAAYC,KAAb,KAAoBjB,KAGxB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO/B,OAAK,EAACO,KAAK,IAAIC,UAAWM,IACjC,oCACC+B,MC3BWI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bd2328b4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/WUML 2.09241dd8.png\";","module.exports = __webpack_public_path__ + \"static/media/bee.d3f0a6fb.png\";","import React from 'react'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport { Link } from \"react-router-dom\";\n\nconst KNavbar = (props) => (\n<Navbar className='navbar-dark mb-3' bg=\"primary\" expand=\"lg\">\n  <Link to='/'><Navbar.Brand>{props.brand}</Navbar.Brand></Link>\n  <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n  <Navbar.Collapse id=\"basic-navbar-nav\">\n    <Nav className=\"mr-auto\">\n      {props.children}\n    </Nav>\n    {props.button}\n  </Navbar.Collapse>\n</Navbar>\n)\n\nexport default KNavbar;","import React from 'react';\nimport { NavLink } from \"react-router-dom\";\n\n\nconst KNavLink = (props) => (\n    <NavLink exact strict\n        className=\"text-decoration-none nav-link\" \n        activeClassName=\"active\" \n        to={props.page.url}>\n\n        {props.page.name}\n\n    </NavLink>\n)\n\nexport default KNavLink;","import React from 'react';\nimport { Route } from \"react-router-dom\";\n\nconst KNavRoute = (props) => (\n<Route path={props.page.url} component={props.page.component} />\n)\n\nexport default KNavRoute;","import React from 'react';\nimport './Custom.scss';\nimport Pic from './WUML 2.png';\n\n\nfunction BrainPowder() {\n  return (<div>\n    <img src={Pic} alt=\"\" />\n    </div>\n  );\n}\n\nexport default BrainPowder;","import BrainPowder from './BrainPowder';\n\nconst pages = [\n    {name:\"Brain Powder\", url:'/BrainPowder', component: BrainPowder},\n    {name:\"Staff\", url:\"/Staff\", component: null},\n    {name:\"Recordings\", url:\"/Recordings\", component: null},\n];\n\nexport default pages;","import React from 'react';\nimport { Jumbotron, \n    Button,\n    Container,\n    Row,\n    Col,\n    Card, } from 'react-bootstrap';\n\nclass Home extends React.Component{\n\n    render(){\n        return <div>\n                    <Jumbotron>\n                        <h1>Off the Rails, On the Airwaves</h1>\n                        <p>\n                        This is a simple hero unit, a simple jumbotron-style component for calling\n                        extra attention to featured content or information.\n                        </p>\n                        <p>\n                        <Button variant=\"primary\" href=\"http://wuml.org\">Find us @ WUML.org</Button>\n                        </p>\n                    </Jumbotron>\n                    <Container>\n                        <Row>\n                            <Col>\n                                <Card className='mx-auto' style={{ width: '18rem' }}>\n                                    <Card.Img variant=\"top\" src=\"https://picsum.photos/268/180?random=1\" />\n                                    <Card.Body>\n                                        <Card.Title>Music for your Ears</Card.Title>\n                                        <Card.Text>\n                                        Listen to the show for an ecclectic mix of alternative and underground Music\n                                        from a large list of genres.\n                                        </Card.Text>\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                            <Col>\n                                <Card className='mx-auto' style={{ width: '18rem' }}>\n                                    <Card.Img variant=\"top\" src=\"https://picsum.photos/268/180?random=2\" />\n                                    <Card.Body>\n                                        <Card.Title>Ideas for your Brain</Card.Title>\n                                        <Card.Text>\n                                        Our talking segments will inoculate your brain width\n                                        ideas and concepts you would not have otherwise come across.\n                                        \n                                        </Card.Text>\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                            <Col>\n                                <Card className='mx-auto' style={{ width: '18rem' }}>\n                                    <Card.Img variant=\"top\" src=\"https://picsum.photos/268/180?random=3\" />\n                                    <Card.Body>\n                                        <Card.Title>Love for your Heart</Card.Title>\n                                        <Card.Text>\n                                        Love is an important component in a persons relationships and in this radio show.\n                                        </Card.Text>\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                        </Row>\n                    </Container>\n                </div>\n    }\n}\n\nexport default Home;\n","import React from 'react';\nimport './Custom.scss';\nimport KNavbar from './components/KNavbar';\nimport KNavLink from './components/KNavLink';\nimport KNavRoute from './components/KNavRoute';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport pages from './pages';\nimport { Button, NavDropdown } from 'react-bootstrap';\nimport Pic from './bee.png';\nimport Home from './Home';\nimport BrainPowder from './BrainPowder';\n\nconst player = <iframe title=\"stream\" src=\"https://embed.radio.co/player/fa3c718.html\" width=\"100%\" allow=\"autoplay\" scrolling=\"no\" style={{border: 'none', overflow: 'hidden', maxWidth: '400px', margin: '0px auto', height: '100px',}}></iframe>;\n\nconst KNavButton = <div id='beebutton'>\n  <Button variant='secondary' href=\"https://www.pollinator.org/\">\n    Bees <img src={Pic} width='25' alt=\"\"/>\n  </Button>\n  </div>\n\nconst KLinks = pages.map((item) => (<KNavLink page={item} key={item.name}/>));\nconst KRoutes = pages.map((item) => (<KNavRoute page={item} key={item.name} />));\n\nfunction App() {\n  return (\n    <Router>\n      <KNavbar brand={\"OTR\"} button={KNavButton}>\n        {KLinks}\n        <NavDropdown title=\"Listen\" id=\"basic-nav-dropdown\">\n          <NavDropdown.Item >{player}</NavDropdown.Item>\n        </NavDropdown>\n      </KNavbar>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <>\n        {KRoutes}\n        </>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}